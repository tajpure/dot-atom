{"mode":"editor","version":1,"windowDimensions":{"x":1432,"y":-8,"width":1456,"height":916,"maximized":true},"grammars":{"deserializer":"GrammarRegistry","grammarOverridesByPath":{}},"project":{"paths":["C:\\Users\\Administrator\\Dropbox\\workspace\\algorithm-kit"],"buffers":[{"text":"package com.tajpure.util.algorithm.sort;\r\n\r\npublic class ArraySort {\r\n\t\r\n\t// Simple sort, memory:O(1) time:O(n^2)\r\n\tpublic static void selectSort(int[] A) {\r\n\t\tfor (int i = 0; i < A.length; i++) {\r\n\t\t\tint min = i;\r\n\t\t\tfor (int j = i; j < A.length; j++) {\r\n\t\t\t\tif (A[j] < A[min]) {\r\n\t\t\t\t\tmin = j;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tint temp = A[i];\r\n\t\t\tA[i] = A[min];\r\n\t\t\tA[min] = temp;\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Simple sort, memory:O(1) time:O(n^2)\r\n\tpublic static void insertSort(int[] A) {\r\n\t\tint i, j;\r\n\t\tfor (i = 0; i < A.length; i++) {\r\n\t\t\tint temp = A[i];\r\n\t\t\tfor (j = i - 1; j >= 0 && A[j] > temp; j--) {\r\n\t\t\t\tA[j + 1] = A[j];\r\n\t\t\t}\r\n\t\t\tA[j+1] = temp;\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Efficient sort, memory:O(n) time:O(nlogn)\r\n\tpublic static void mergeSort(int[] A) {\r\n\t\tint[] B = new int[A.length];\r\n\t\tmergeSort(A, B, 0, A.length - 1);\r\n\t}\r\n\t\r\n\tpublic static void mergeSort(int[] A, int[] B, int left, int right) {\r\n\t\tif (left < right) {\r\n\t\t\tint center = (left + right) / 2;\r\n\t\t\tmergeSort(A, B, left, center);\r\n\t\t\tmergeSort(A, B, center + 1, right);\r\n\t\t\tmerge(A, B, left, center + 1, right);\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic static void merge(int[] A, int[] B, int lStart, int rStart, int rEnd) {\r\n\t\tint lEnd = rStart - 1;\r\n\t\tint tStart = lStart;\r\n\t\tint leftTmp = lStart;\r\n\t\twhile (lStart <= lEnd && rStart <= rEnd) {\r\n\t\t\tif (A[lStart] < A[rStart]) {\r\n\t\t\t\tB[tStart++] = A[lStart++];\r\n\t\t\t} else {\r\n\t\t\t\tB[tStart++] = A[rStart++];\r\n\t\t\t}\r\n\t\t}\r\n\t\twhile (lStart <= lEnd) {\r\n\t\t\tB[tStart++] = A[lStart++];\r\n\t\t}\r\n\t\twhile (rStart <= rEnd) {\r\n\t\t\tB[tStart++] = A[rStart++];\r\n\t\t}\r\n\t\tfor (; rEnd >= leftTmp; rEnd--) {\r\n\t\t\tA[rEnd] = B[rEnd];\r\n\t\t}\r\n\t}\r\n\r\n\t// Efficient sort\r\n\tpublic static void heapSort(int[] A) {\r\n\t\tbuildMaxHeapify(A);\r\n\t\theapSort1(A);\r\n\t}\r\n\t\r\n\tprivate static void buildMaxHeapify(int[] A) {\r\n\t\tint startIndex = getParentIndex(A.length - 1);\r\n\t\tfor (int i = startIndex; i >= 0; i--) {\r\n\t\t\tmaxHeapify(A, A.length, i);\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate static void maxHeapify(int[] A, int size, int index) {\r\n\t\tint left = getLeftChildIndex(index);\r\n\t\tint right = getRightChildIndex(index);\r\n\t\tint largest = index;\r\n\t\tif (left < size && A[index] < A[left]) {\r\n\t\t\tlargest = left;\r\n\t\t}\r\n\t\tif (right < size && A[largest] < A[right]) {\r\n\t\t\tlargest = right;\r\n\t\t}\r\n\t\tif (largest != index) {\r\n\t\t\tint temp = A[index];\r\n\t\t\tA[index] = A[largest];\r\n\t\t\tA[largest] = temp;\r\n\t\t\tmaxHeapify(A, size, largest);\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate static void heapSort1(int[] A) {\r\n\t\tfor (int i = A.length - 1; i > 0; i--) {\r\n\t\t\tint temp = A[0];\r\n\t\t\tA[0] = A[i];\r\n\t\t\tA[i] = temp;\r\n\t\t\tmaxHeapify(A, i, 0);\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate static int getParentIndex(int current) {\r\n\t\treturn (current - 1) >> 1;\r\n\t}\r\n\t\r\n\tprivate static int getLeftChildIndex(int current) {\r\n\t\treturn (current << 1) + 1;\r\n\t}\r\n\t\r\n\tprivate static int getRightChildIndex(int current) {\r\n\t\treturn (current << 1) + 2;\r\n\t}\r\n\r\n\t// Efficient sort\r\n\tpublic static void quickSort(int[] A) {\r\n\t\tquickSort(A, 0, A.length - 1);\r\n\t}\r\n\t\r\n\tpublic static void quickSort(int[] A, int left, int right) {\r\n\t\tint key;\r\n\t\tif (left < right) {\r\n\t\t\tkey = partition(A, left, right);\r\n\t\t\tquickSort(A, left, key - 1);\r\n\t\t\tquickSort(A, key + 1, right);\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic static int partition(int A[], int left, int right) {\r\n\t\tint pivot = A[left];\r\n\t\twhile (left < right) {\r\n\t\t\twhile (left < right && A[right] >= pivot) {\r\n\t\t\t\tright--;\r\n\t\t\t}\r\n\t\t\tif (left < right) {\r\n\t\t\t\tA[left++] = A[right];\r\n\t\t\t}\r\n\t\t\twhile (left < right && A[left] <= pivot) {\r\n\t\t\t\tleft++;\r\n\t\t\t}\r\n\t\t\tif (left < right) {\r\n\t\t\t\tA[right--] = A[left];\r\n\t\t\t}\r\n\t\t}\r\n\t\tA[left] = pivot;\r\n\t\treturn left;\r\n\t}\r\n\t\r\n\t// Bubble sort\r\n\tpublic static void bubbleSort(int[] A) {\r\n\t\tfor (int i = 0; i < A.length; i++) {\r\n\t\t\tfor (int j = i; j < A.length; j++) {\r\n\t\t\t\tif (A[i] > A[j]) {\r\n\t\t\t\t\tint temp = A[i];\r\n\t\t\t\t\tA[i] = A[j];\r\n\t\t\t\t\tA[j] = temp;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Shell sort\r\n\tpublic static void shellSort(int[] A) {\r\n\t\tint i, j, gap;\r\n        int temp;\r\n        int n = A.length;\r\n        for (gap = n / 2; gap > 0; gap /= 2) {\r\n            for (i = gap; i < n; i++) {\r\n                for (j = i - gap; j >= 0 && A[j] > A[j + gap]; j -= gap) {\r\n                    temp = A[j];\r\n                    A[j] = A[j + gap];\r\n                    A[j + gap] = temp;\r\n                }\r\n            }\r\n        }\r\n\t}\r\n\t\r\n\t// TODO\r\n\tpublic static void combSort(int[] A) {\r\n\t\t\r\n\t}\r\n\r\n\t// TODO\r\n\tpublic static void countingSort(int[] A) {\r\n\r\n\t}\r\n\r\n\t// TODO\r\n\tpublic static void bucketSort(int[] A) {\r\n\t\t\r\n\t}\r\n\r\n\t// TODO\r\n\tpublic static void radixSort(int[] A) {\r\n\t\t\r\n\t}\r\n\t\r\n\tpublic static void print(int[] A) {\r\n\t\tfor (int i = 0; i < A.length; i++)\r\n\t\t\tSystem.out.print(A[i] + \" \");\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tint[] A1 = {2, 3, 5, 4, 6, 8, 7, 1, 9, 0};\r\n\t\tSystem.out.print(\"origin:\");\r\n\t\tprint(A1);\r\n\t\tSystem.out.println();\r\n\t\tSystem.out.print(\"select sort:\");\r\n\t\tselectSort(A1);\r\n\t\tprint(A1);\r\n\t\tint[] A2 = {2, 3, 5, 4, 6, 8, 7, 1, 9, 0};\r\n\t\tSystem.out.println();\r\n\t\tSystem.out.print(\"insert sort:\");\r\n\t\tinsertSort(A2);\r\n\t\tprint(A2);\r\n\t\tint[] A3 = {2, 3, 5, 4, 6, 8, 7, 1, 9, 0};\r\n\t\tSystem.out.println();\r\n\t\tSystem.out.print(\"merge sort:\");\r\n\t\tmergeSort(A3);\r\n\t\tprint(A3);\r\n\t\tint[] A4 = {2, 3, 5, 4, 6, 8, 7, 1, 9, 0};\r\n\t\tSystem.out.println();\r\n\t\tSystem.out.print(\"heap sort:\");\r\n\t\theapSort(A4);\r\n\t\tprint(A4);\r\n\t\tint[] A5 = {2, 3, 5, 4, 6, 8, 7, 1, 9, 0};\r\n\t\tSystem.out.println();\r\n\t\tSystem.out.print(\"quick sort:\");\r\n\t\tquickSort(A5);\r\n\t\tprint(A5);\r\n\t\tint[] A6 = {2, 3, 5, 4, 6, 8, 7, 1, 9, 0};\r\n\t\tSystem.out.println();\r\n\t\tSystem.out.print(\"bubble sort:\");\r\n\t\tbubbleSort(A6);\r\n\t\tprint(A6);\r\n\t\tint[] A7 = {2, 3, 5, 4, 6, 8, 7, 1, 9, 0};\r\n\t\tSystem.out.println();\r\n\t\tSystem.out.print(\"shell sort:\");\r\n\t\tshellSort(A7);\r\n\t\tprint(A7);\r\n\t}\r\n\t\r\n}\r\n","markers":{"markers":{"1":{"id":1,"range":[[14,17],[14,17]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":20,"goalScreenRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History","version":1},"encoding":"utf8","filePath":"C:\\Users\\Administrator\\Dropbox\\workspace\\algorithm-kit\\src\\com\\tajpure\\util\\algorithm\\sort\\ArraySort.java","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"2a6ba0bf1a9c62edd377588f25f68d17c2158b3d","deserializer":"TextBuffer"},{"text":".list-tree li.list-nested-item[class*='status-'] > .list-item {\r\n    color: #333 !important;\r\n}\r\n\r\n.icon-file-text {\r\n  color:#333 !important;\r\n}\r\n","markers":{"markers":{"1":{"id":1,"range":[[7,0],[7,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":100,"goalScreenRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[6,1]],"oldText":"","newText":".list-tree li.list-nested-item[class*='status-'] > .list-item {\r\n    color: #333 !important;\r\n}\r\n\r\n.icon-file-text {\r\n  color:#333 !important;\r\n}","normalizeLineEndings":true,"deserializer":"BufferPatch"},{"id":1,"oldParams":{"range":[[6,1],[6,1]]},"newParams":{"range":[[6,0],[6,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[0,0]],"oldText":"","newText":"","normalizeLineEndings":true,"deserializer":"BufferPatch"}],"oldMarkersSnapshot":{"1":{"range":[[0,0],[0,0]],"valid":true}},"deserializer":"Transaction"},{"patches":[{"oldRange":[[6,1],[6,1]],"newRange":[[6,1],[7,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"oldMarkersSnapshot":{"8":{"range":[[6,0],[6,1]],"valid":true}},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"}],"oldMarkersSnapshot":{"1":{"range":[[6,0],[6,0]],"valid":true},"8":{"range":[[6,0],[6,1]],"valid":true},"9":{"range":[[4,16],[4,17]],"valid":true}},"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History","version":1},"encoding":"utf8","filePath":"C:\\Users\\Administrator\\.atom\\styles.less","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"bd91edce288e434816a550c6ee17f448c0d252e1","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":20,"softTabs":false,"displayBuffer":{"id":21,"softWrapped":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"C:\\Users\\Administrator\\Dropbox\\workspace\\algorithm-kit\\src\\com\\tajpure\\util\\algorithm\\sort\\ArraySort.java","invisibles":null,"deserializer":"TokenizedBuffer"},"invisibles":null,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":100,"softTabs":true,"displayBuffer":{"id":101,"softWrapped":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"C:\\Users\\Administrator\\.atom\\styles.less","invisibles":null,"deserializer":"TokenizedBuffer"},"invisibles":null,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"deserializer":"SettingsView","version":2,"activePanelName":"Install","uri":"atom://config"}],"activeItemURI":"C:\\Users\\Administrator\\.atom\\styles.less","focused":true,"flexScale":1,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-java","language-less","language-hyperlink","language-todo"],"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"C:\\Users\\Administrator\\Dropbox\\workspace\\algorithm-kit\\src\\com\\tajpure\\util\\algorithm\\sort\\ArraySort.java":1431503667470,"C:\\Users\\Administrator\\.atom\\styles.less":1431503668142},"metrics":{"sessionLength":561913},"tree-view":{"directoryExpansionStates":{"C:\\Users\\Administrator\\Dropbox\\workspace\\algorithm-kit":{"isExpanded":true,"entries":{".git":{"isExpanded":false,"entries":{}},".settings":{"isExpanded":false,"entries":{}},"bin":{"isExpanded":false,"entries":{}},"src":{"isExpanded":true,"entries":{"com":{"isExpanded":true,"entries":{"tajpure":{"isExpanded":true,"entries":{"util":{"isExpanded":true,"entries":{"algorithm":{"isExpanded":true,"entries":{"graph":{"isExpanded":false,"entries":{}},"sctructure":{"isExpanded":false,"entries":{}},"sort":{"isExpanded":true,"entries":{}},"string":{"isExpanded":false,"entries":{}}}}}}}}}}}}}}},"selectedPath":"C:\\Users\\Administrator\\Dropbox\\workspace\\algorithm-kit","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":240}}}